From: Mark Hymers <mhy@debian.org>
Subject: hsize_t is used by some MPI libraries so rename freesurfer version
--- a/include/hips_basic.h
+++ b/include/hips_basic.h
@@ -30,7 +30,7 @@
  * to an individual installation.
  */
 
-typedef unsigned long hsize_t; /* variable which can hold the size of an
+typedef unsigned long fs_hsize_t; /* variable which can hold the size of an
         image in bytes */
 #ifdef AIX
 #define HPUXORAIX
@@ -111,7 +111,7 @@
 {
   int nbins;
   int *histo;
-  hsize_t sizehist;
+  fs_hsize_t sizehist;
   h_boolean histodealloc;
   int pixel_format;
   Pixelval minbin;
@@ -210,7 +210,7 @@
 char *strsave(),*memalloc(),*formatheader(),*formatheadera();
 char *formatheaderc(),*hformatname(),*hformatname_f(),*hformatname_t();
 byte *halloc(),*hmalloc();
-hsize_t hsizepix();
+fs_hsize_t hsizepix();
 struct extpar *findparam(),*grepparam();
 FILE *hfopenr(),*ffopen(),*ffreopen();
 /* h_boolean getline(),swallownl(),hfgets(); */
--- a/include/hips_header.h
+++ b/include/hips_header.h
@@ -62,8 +62,8 @@
   int pixel_format; /* The format of each pixel */
   int numcolor; /* The number of color frames per image */
   int numpix;  /* The number of pixels per stored frame */
-  hsize_t sizepix; /* The number of bytes per pixel */
-  hsize_t sizeimage; /* The number of bytes per stored frame */
+  fs_hsize_t sizepix; /* The number of bytes per pixel */
+  fs_hsize_t sizeimage; /* The number of bytes per stored frame */
   byte *image;  /* The image itself */
   h_boolean imdealloc; /* if nonzero, free image when requested */
   byte *firstpix; /* Pointer to first pixel (for ROI) */
--- a/include/hmem.h
+++ b/include/hmem.h
@@ -34,7 +34,7 @@
 #else
 
 #define hmemset(buf, val, count)   huge_memset((huge char *)buf, (char)val, (long)count)
-#define hcalloc(n,size)            huge_alloc((hsize_t)n*size, 1)
+#define hcalloc(n,size)            huge_alloc((fs_hsize_t)n*size, 1)
 #define hmemcpy(Dst, Src, Count)   huge_memcpy((huge char *)Dst, (huge char *)Src, (long)Count)
 
 #endif
--- a/utils/image.c
+++ b/utils/image.c
@@ -122,7 +122,7 @@
   int fcb,cb;
   long  npix ;
 
-  if (I->sizeimage == (hsize_t) 0)  /*dng*/
+  if (I->sizeimage == (fs_hsize_t) 0)  /*dng*/
   {
     I->imdealloc = (h_boolean) FALSE; /*dng*/
     return(NO_ERROR);
@@ -2425,7 +2425,7 @@
 ImageMulScale(IMAGE *Isrc, IMAGE *Idst, Pixelval *p)
 {
   int    ecode;
-  hsize_t size ;
+  fs_hsize_t size ;
   float  real, imag, sreal, simag ;
   CPIX   *csrc, *cdst ;
 
@@ -2466,7 +2466,7 @@
 IMAGE *
 ImageAddScalar(IMAGE *Isrc, IMAGE *Idst, float scalar)
 {
-  hsize_t    size ;
+  fs_hsize_t    size ;
   float  *fpix ;
 
   if (!Idst)
@@ -2476,7 +2476,7 @@
   switch (Isrc->pixel_format)
   {
   case PFFLOAT:
-    size = Isrc->numpix * (hsize_t)Isrc->num_frame ;
+    size = Isrc->numpix * (fs_hsize_t)Isrc->num_frame ;
     fpix = IMAGEFpix(Isrc, 0, 0) ;
     while (size--)
       *fpix++ += scalar ;
@@ -2500,7 +2500,7 @@
 {
   float  *fin, *fout ;
   byte   *cin, *cout, cinpix, coutpix ;
-  hsize_t    npix ;
+  fs_hsize_t    npix ;
 
   if (!Idst)
     Idst = ImageAlloc(Isrc->rows,Isrc->cols,Isrc->pixel_format,Isrc->num_frame);
@@ -2508,7 +2508,7 @@
   if (Idst->pixel_format != Isrc->pixel_format)
     ErrorReturn(NULL, (ERROR_BADPARM, "ImageReplace: src and dst formats must match")) ;
 
-  npix = Isrc->numpix * (hsize_t)Isrc->num_frame ;
+  npix = Isrc->numpix * (fs_hsize_t)Isrc->num_frame ;
   switch (Isrc->pixel_format)
   {
   case PFFLOAT:
